name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'IMAGE:TAG'
        required: true

jobs:
  pack-deploy:
    runs-on: ubuntu-latest
    if: contains('
      refs/heads/uat
      refs/heads/prod
      ', github.ref)
    steps:
    - uses: actions/checkout@v2
    - name: Extract Branch Name
      id: extract-branch
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

    - name: Set environment variables
      id: env-vars
      run: |
        if [ $BRANCH == 'uat' ] 
        then 
            echo -e ::set-output name=connection-string::'${{ secrets.CONNECTIONSTRING_UAT }}'
            echo -e ::set-output name=cognitoconfig-secretaccesskey::'${{ secrets.COGNITOCONFIG_SECRETACCESSKEY_UAT }}'
            echo -e ::set-output name=cognitoconfig-accesskey::'${{ secrets.COGNITOCONFIG_ACCESSKEY_UAT }}'
            echo -e ::set-output name=cognitoconfig-client-id::'${{ secrets.COGNITOCONFIG_CLIENTID_UAT }}'
            echo -e ::set-output name=cognitoconfig-userpool-id::'${{ secrets.COGNITOCONFIG_USERPOOLID_UAT }}'
            echo -e ::set-output name=cognitoconfig-authority::'${{ secrets.COGNITOCONFIG_AUTHORITY_UAT }}'
            echo -e ::set-output name=cognitoconfig-guest-client-id::'${{ secrets.COGNITOCONFIG_GUEST_CLIENT_ID_UAT }}'
            echo -e ::set-output name=cognitoconfig-guest-user-pass::'${{ secrets.COGNITOCONFIG_GUEST_USER_PASS_UAT }}'
            echo -e ::set-output name=twilioconfig-accounts-id::'${{ secrets.TWILIOCONFIG_ACCOUNTSID_UAT }}'
            echo -e ::set-output name=twilioconfig-authtoken::'${{ secrets.TWILIOCONFIG_AUTHTOKEN_UAT }}'
            echo -e ::set-output name=twilioconfig-apikeys-id::'${{ secrets.TWILIOCONFIG_APIKEYSID_UAT }}'
            echo -e ::set-output name=twilioconfig-apisecretkey::'${{ secrets.TWILIOCONFIG_APIKEYSECRET_UAT }}'
            echo -e ::set-output name=service-account-accesskey::'${{ secrets.SERVICE_ACCOUNT_ACCESS_KEY_QA }}'
            echo -e ::set-output name=service-account-secretaccesskey::'${{ secrets.SERVICE_ACCOUNT_SECRET_ACCESS_KEY_QA }}'
            echo -e ::set-output name=gcp-private-key-id::'${{ secrets.GCP_PRIVATE_KEY_ID }}'
            echo -e ::set-output name=gcp-private-key-contract::'${{ secrets.GCP_PRIVATE_KEY_CONTRACT }}'
            echo -e ::set-output name=gcp-client-email::'${{ secrets.GCP_CLIENT_EMAIL }}'
            echo -e ::set-output name=gcp-client-id::'${{ secrets.GCP_CLIENT_ID }}'
        else 
            echo -e ::set-output name=connection-string::'${{ secrets.CONNECTIONSTRING_PROD }}'
            echo -e ::set-output name=cognitoconfig-secretaccesskey::'${{ secrets.COGNITOCONFIG_SECRETACCESSKEY_PROD }}'
            echo -e ::set-output name=cognitoconfig-accesskey::'${{ secrets.COGNITOCONFIG_ACCESSKEY_PROD }}'
            echo -e ::set-output name=cognitoconfig-client-id::'${{ secrets.COGNITOCONFIG_CLIENTID_PROD }}'
            echo -e ::set-output name=cognitoconfig-userpool-id::'${{ secrets.COGNITOCONFIG_USERPOOLID_PROD }}'
            echo -e ::set-output name=cognitoconfig-authority::'${{ secrets.COGNITOCONFIG_AUTHORITY_PROD }}'
            echo -e ::set-output name=cognitoconfig-guest-client-id::'${{ secrets.COGNITOCONFIG_GUEST_CLIENT_ID_PROD }}'
            echo -e ::set-output name=cognitoconfig-guest-user-pass::'${{ secrets.COGNITOCONFIG_GUEST_USER_PASS_PROD }}'
            echo -e ::set-output name=twilioconfig-accounts-id::'${{ secrets.TWILIOCONFIG_ACCOUNTSID_PROD }}'
            echo -e ::set-output name=twilioconfig-authtoken::'${{ secrets.TWILIOCONFIG_AUTHTOKEN_PROD }}'
            echo -e ::set-output name=twilioconfig-apikeys-id::'${{ secrets.TWILIOCONFIG_APIKEYSID_PROD }}'
            echo -e ::set-output name=twilioconfig-apisecretkey::'${{ secrets.TWILIOCONFIG_APIKEYSECRET_PROD }}'
            echo -e ::set-output name=service-account-accesskey::'${{ secrets.SERVICE_ACCOUNT_ACCESS_KEY_PROD }}'
            echo -e ::set-output name=service-account-secretaccesskey::'${{ secrets.SERVICE_ACCOUNT_SECRET_ACCESS_KEY_PROD }}'
            echo -e ::set-output name=gcp-private-key-id::'${{ secrets.GCP_PRIVATE_KEY_ID }}'
            echo -e ::set-output name=gcp-private-key-contract::'${{ secrets.GCP_PRIVATE_KEY_CONTRACT }}'
            echo -e ::set-output name=gcp-client-email::'${{ secrets.GCP_CLIENT_EMAIL }}'
            echo -e ::set-output name=gcp-client-id::'${{ secrets.GCP_CLIENT_ID }}'
        fi 
      env:
        BRANCH: ${{ steps.extract-branch.outputs.branch }}
    
    - name: Replace ConnectionStrings in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "CONNECTION_STRING"
        replace: "${{ steps.env-vars.outputs.connection-string }}"
        exclude: "^$"
  
    - name: Replace Cognito Secret Access Key in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "SECRET_ACCESS_KEY"
        replace: "${{ steps.env-vars.outputs.cognitoconfig-secretaccesskey }}"
        exclude: "^$"

    - name: Replace Cognito Access Key in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "ACCESS_KEY"
        replace: "${{ steps.env-vars.outputs.cognitoconfig-accesskey }}"
        exclude: "^$"
    
    - name: Replace Cognito Client ID in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "CLIENT_ID"
        replace: "${{ steps.env-vars.outputs.cognitoconfig-client-id }}"
        exclude: "^$"
    
    - name: Replace Cognito User Pool in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "USER_POOL_ID"
        replace: "${{ steps.env-vars.outputs.cognitoconfig-userpool-id }}"
        exclude: "^$"
    
    - name: Replace Cognito Authority in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "AUTHORITY"
        replace: "${{ steps.env-vars.outputs.cognitoconfig-authority }}"
        exclude: "^$"

    - name: Replace Cognito GuestClientId in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "GUEST_CLIENT_ID"
        replace: "${{ steps.env-vars.outputs.cognitoconfig-guest-client-id }}"
        exclude: "^$"

    - name: Replace Cognito GuestUsersPass in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "GUEST_USER_PASS"
        replace: "${{ steps.env-vars.outputs.cognitoconfig-guest-user-pass }}"
        exclude: "^$"
    
    - name: Replace Twilio AccountSid in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "TWILIO_ACCOUNTSID"
        replace: "${{ steps.env-vars.outputs.twilioconfig-accounts-id }}"
        exclude: "^$"
    
    - name: Replace Twilio AccountSid in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "TWILIO_AUTHTOKEN"
        replace: "${{ steps.env-vars.outputs.twilioconfig-authtoken }}"
        exclude: "^$"
    
    - name: Replace Twilio ApiKeySID in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "TWILIO_APIKEYSID"
        replace: "${{ steps.env-vars.outputs.twilioconfig-apikeys-id }}"
        exclude: "^$"

    - name: Replace Twilio ApiKeySecret in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "TWILIO_APIKEYSECRET"
        replace: "${{ steps.env-vars.outputs.twilioconfig-apisecretkey }}"
        exclude: "^$"

    - name: Replace Twilio S3DestinationKey in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "TWILIO_DESTINATION_KEY"
        replace: "${{ steps.env-vars.outputs.service-account-accesskey }}"
        exclude: "^$"

    - name: Replace Twilio S3DestinationSecret in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "TWILIO_DESTINATION_SECRET"
        replace: "${{ steps.env-vars.outputs.service-account-secretaccesskey }}"
        exclude: "^$"
    
    - name: Replace GCP private_key_id in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "GCP_PRIVATE_KEY_ID"
        replace: "${{ steps.env-vars.outputs.gcp-private-key-id }}"
        exclude: "^$"
    
    - name: Replace GCP private_key in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "GCP_PRIVATE_KEY_CONTRACT"
        replace: "${{ secrets.GCP_PRIVATE_KEY_CONTRACT }}"
        exclude: "^$"
    
    - name: Replace GCP client_email in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "GCP_CLIENT_EMAIL"
        replace: "${{ steps.env-vars.outputs.gcp-client-email }}"
        exclude: "^$"
    
    - name: Replace GCP client_id in task definition
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: 'task-definition-${{ steps.extract-branch.outputs.branch }}.json'
        find: "GCP_CLIENTID"
        replace: "${{ steps.env-vars.outputs.gcp-client-id }}"
        exclude: "^$"        

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Set New Image to Amazon ECS Task Definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./.github/workflows/task-definition-${{ steps.extract-branch.outputs.branch }}.json
        container-name: prp-be-container-${{ steps.extract-branch.outputs.branch }}
        image: ${{ github.event.inputs.image }}
    - name: Update Amazon ECS Cluster Service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: prp-be-srv-${{ steps.extract-branch.outputs.branch }}
        cluster: prp-cluster-${{ steps.extract-branch.outputs.branch }}
        wait-for-service-stability: true
